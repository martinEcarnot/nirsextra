# idref=seq(1,2700,60)
# Xured=Xu[idref,]
# Xup=pre(Xured,p)
Xup=pre(Xu,p)
fm2223 <- plsr(Xr2223, Yr2223, Xup, ncomp = ncomp)
fm2223_1=lapply(fm2223[1:3],function (x) {x[x$ncomp==11,]})
write.csv(fm2223_1$fit,file.path("~/Documents/INRA/Projets/scoop/scan_scoop_2023/","scoop2022_SLA_pred_C2223.csv"))
hist(fm2223_1$fit$y1)
str(Xup)
library(rnirs)
library(ggplot2)
library(dplyr)
library(nirsextra)
d='/home/ecarnot/Documents/INRA/ASD/etudiant_jacques_23092022/'
sp=asd_read_dir(d)
pos=rep(1:30,9)
sp=sp2df(sp)
sp$geno=substr(rownames(sp),1,nchar(rownames(sp))-5)
sp$grain=paste(sp$geno,pos,sep="-")
sp$prot=c(rep(11.6,30),rep(12,30),rep(13,30),rep(14,30),rep(15,30),rep(16,30),rep(17,30),rep(18,30),rep(19,30))
w=51
p=rbind(list('adj',c(651,1451)),list('red',c(10,1,1)),list('snv',''),list('sder',c(1,3,w)),list('red',c(w/2,w/2,1)))
# p=rbind(list('adj',''),list('red',c(1000,40,1)),list('snv',''),list('sder',c(1,3,w)),list('red',c(w/2,w/2,1)))
sp$xp=pre(sp$x,p)
plotsp(sp$xp)
n=nrow(sp)
nrep=30
ncomp=12
itest=sample(n,n/5)
Xu=sp$xp[itest,]
Yu=sp$prot[itest]
Xr=sp$xp#[-itest,]
Yr=sp$prot#[-itest]
seg <- segmkf(n =nrow(Xr), K = 5, typ = "random", nrep = nrep)
fm=cvfit(Xr,Yr,fun=plsr,segm=seg, ncomp=ncomp)
mse(fm, ~ ncomp)
fm5=lapply(fm[1:3],function (x) {x[x$ncomp==5,]})
# plot(fm5$fit$y1,fm5$y$y1)
# On regarde la résiduelle moyenne (en CV) d'un grain dans toutes les rep, toutes les VL
# on s'assure qu'elle est très corrélée à la résiduelle moyenne à 5 VL
r=fm$r
rttvl=aggregate(r$y1,by=list(r$rownam),"mean")
r5=aggregate(fm5$r$y1,by=list(fm5$r$rownam),"mean")
g=unique(sp$geno)
ngr_lot=12
# rt=data.frame(r=numeric(length(g)*ngr_lot))
rt=data.frame(name=character(),err2=numeric())
for (i in 1:length(g)) {
idr=which(grepl(g[i], r$rownam))
r1=r[idr,]
r1g=aggregate(r1$y1^2,by=list(r1$rownam),"mean")
colnames(r1g)=c("name","err2")
rt=rbind(rt,r1g[order(r1g$err2),][1:ngr_lot,])
}
iliste=which(rownames(sp) %in% rt$name)
liste=sp$grain[iliste]
# write.csv(liste,file.path("/home/ecarnot/Documents/INRA/NIRS_labo/","liste_Prot_grains_indiv_ASD_sept2022.csv"))
xnew=asd_read_dir("/run/user/1000/gvfs/smb-share:server=stocka2,share=agap-ble/Ble/ASD/R22_epo_BIS_12.07.2022")
xnew=asd_read_dir("/run/user/1000/gvfs/smb-share:server=stocka2,share=agap-ble/Ble/ASD/R22_epo_BIS_12.07.2022")
spr=sp[iliste,]
nrep=30
ncomp=12
Xr=spr$xp
Yr=spr$prot
seg <- segmkf(n =nrow(Xr), K = 5, typ = "random", nrep = nrep)
fmr=cvfit(Xr,Yr,fun=plsr,segm=seg, ncomp=ncomp)
mse(fmr, ~ ncomp)
fmr5=lapply(fmr[1:3],function (x) {x[x$ncomp==7,]})
# plot(fmr5$fit$y1,fmr5$y$y1)
fm <- plsr(Xr, Yr, pre(xnew,p), ncomp = ncomp)
fm1=lapply(fm[1:3],function (x) {x[x$ncomp==6,]})
prot_EPO22bis=data.frame(prot_calib_grain=fm1$fit$y1,nom=fm1$fit$rownam)
prot_EPO22bis_table=read.table("/home/ecarnot/Documents/INRA/SelPhen_2023/Stage_CBienvenu_2023/SelPhen2023_EPO22_Bis_Prot_pred_ASD_lots.txt", header = T, sep=";")
colnames(prot_EPO22bis_table)[c(2,4)]=c("nom","prot_calib_table")
prot_EPO22bis=merge(prot_EPO22bis,prot_EPO22bis_table,by="nom")[,-c(3,4)]
f="/home/ecarnot/Documents/INRA/Projets/MobiDiv/2022/THR_PAR/Données Totale capteur Lora avec exposition station Meteo du 07 au 12 septembre 2022.csv"
x=read.table(f,header = TRUE, dec=".")
str(x)
x=read.table(f,header = TRUE, dec=".", sep=";")
str(x)
plot(x$TempC_SHT)
plot(x$TempC_SHT, type = l)
plot(x$TempC_SHT, pch=".")
i1=which(x$TempC_SHT>30)[1]
i1
xr=x[1:10000,]
plot(xr$TempC_SHT, pch=".")
plot(prot_EPO22bis, pch=".")
str(plot(prot_EPO22bis)
)
str(prot_EPO22bis)
mse(fmr, ~ ncomp)
mse(fmr, ~ ncomp)
plot(prot_EPO22bis, pch=".")
plot(prot_EPO22bis)
# xnew=asd_read_dir("/run/user/1000/gvfs/smb-share:server=stocka2,share=agap-ble/Ble/ASD/R22_epo_BIS_12.07.2022")
xnew=asd_read_dir("/run/user/1000/gvfs/smb-share:server=stocka2,share=agap-ble/Ble/ASD/epo-22-graines/")
fm <- plsr(Xr, Yr, pre(xnew,p), ncomp = ncomp)
fm1=lapply(fm[1:3],function (x) {x[x$ncomp==10,]})
fm1$fit$y1
fm1$fit$rownam
plot(prot_EPO22bis$prot_calib_table)
plot(fm1$fit$y1)
prot_EPO22bis=data.frame(prot_calib_grain=fm1$fit$y1,nom=fm1$fit$rownam)
write.csv("/home/ecarnot/Documents/INRA/SelPhen_2023/Stage_CBienvenu_2023/Pred_prot_grain_ASD_nov2022.csv",prot_EPO22bis)
prot_EPO22bis
prot_EPO22bis=data.frame(nom=fm1$fit$rownam, prot_calib_grain=fm1$fit$y1)
write.csv("/home/ecarnot/Documents/INRA/SelPhen_2023/Stage_CBienvenu_2023/Pred_prot_grain_ASD_nov2022.csv",prot_EPO22bis)
write.csv(prot_EPO22bis,"/home/ecarnot/Documents/INRA/SelPhen_2023/Stage_CBienvenu_2023/Pred_prot_grain_ASD_nov2022.csv")
xnew=asd_read_dir("/run/user/1000/gvfs/smb-share:server=stocka2,share=agap-ble/Ble/ASD/R22_epo_BIS_12.07.2022")
fm <- plsr(Xr, Yr, pre(xnew,p), ncomp = ncomp)
fm1=lapply(fm[1:3],function (x) {x[x$ncomp==10,]})
prot_EPO22bis=data.frame(nom=fm1$fit$rownam, prot_calib_grain=fm1$fit$y1)
plot(prot_EPO22bis)
plot(prot_EPO22bis$prot_calib_grain)
write.csv(prot_EPO22bis,"/home/ecarnot/Documents/INRA/SelPhen_2023/Stage_CBienvenu_2023/Pred_prot_grain_ASD_nov2022_bis.csv")
f="/run/user/1000/gvfs/smb-share:server=stocka2,share=agap-ble/Ble/PerkinElmer/Manip_Jacques_AB_avant_semis_2022/EPO_Gros_R1_2.sp"
library(nirsextra)
sp=readSP.pe(f)
str(sp)
9620+39+39
9620+390+390
9620+400
10170-10020
10170-9620
55/2
16*44
f="/home/ecarnot/Documents/INRA/ASD/disques feuilles 2023 Selgenvit/Spectrum00001.asd"
sp=asd_read(f)
library(nirsextra)
sp=asd_read(f)
type
times=T
t1=paste(sp$info$spectrumheaderwhensec,sp$info$spectrumheaderwhenmin,sp$info$spectrumheaderwhenhour,sp$info$spectrumheaderwhenmday,sp$info$spectrumheaderwhenmon,sp$info$spectrumheaderwhenyear)
tim=rbind(tim,as.POSIXct(t1, format = "%S %M %H %d %m %y",origin = "1960-01-01"))
tim=""
tim=rbind(tim,as.POSIXct(t1, format = "%S %M %H %d %m %y",origin = "1960-01-01"))
tim
as.Date(as.numeric(tim))
as.POSIXct(as.numeric(tim))
f="/home/ecarnot/Documents/INRA/ASD/disques feuilles 2023 Selgenvit/Spectrum00001.asd"
sp=asd_read(f)
library(nirsextra)
sp=asd_read(f)
sp$info$spectrumheaderwhenyear
sp$info$spectrumheaderwhenmon
sp$info$spectrumheaderwhenwday
sp$info$spectrumheaderwhenmday
sp$info$spectrumheaderwhenmin
sp$info$spectrumheaderwhenmon
library(nirsextra)
library(nirsextra)
library(nirsextra)
asd_read_dir
devtools::document()
devtools::install()
devtools::install()
install.packages("gitcreds")
gitcreds::gitcreds_set()
gitcreds::gitcreds_get()
gitcreds::gitcreds_set()
source("~/Documents/INRA/R/nirsextra/R/gridscore_mec.R")
load("~/Documents/INRA/R/xy_ag")
source("~/Documents/INRA/R/nirsextra/R/gridscore_mec.R")
library(rchemo)
library(rchemo)
source("~/Documents/INRA/R/nirsextra/R/gridscore_mec.R")
ncomp=20
segm <- list(rep1 = as.list(1:nrow(x)))
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
library(nirsextra)
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
.mat <- function(X, prefix = NULL) {
if(is.vector(X))
X <- matrix(X, ncol = 1)
if(!is.matrix(X))
X <- as.matrix(X)
if(is.null(row.names(X)))
row.names(X) <- seq_len(dim(X)[1])
if(is.null(prefix)) {
if(is.null(colnames(X)))
colnames(X) <- paste("x", seq_len(dim(X)[2]), sep = "")
}
else
colnames(X) <- paste(prefix, seq_len(dim(X)[2]), sep = "")
X
}
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
library(data.table)
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
str(fmc)
source("~/Documents/INRA/R/nirsextra/R/gridscore_mec.R")
source("~/Documents/INRA/R/nirsextra/R/gridscore_mec.R")
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
detach("package:nirsextra", unload = TRUE)
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
source("~/Documents/INRA/R/nirsextra/R/gridcv_mec.R")
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
source("~/Documents/INRA/R/nirsextra/R/gridscore_mec.R")
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
score(pred[[i]]
)
pred[[i]]
gitcreds::gitcreds_set()
load("~/Documents/INRA/R/xy_ag")
library(rchemo)
library(nirsextra)
library(data.table)
source("~/Documents/INRA/R/nirsextra/R/gridscore_mec.R")
ncomp=20
segm <- list(rep1 = as.list(1:nrow(x)))
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
str(fmc)
?score
library(rchemo)
?score
?scores
?score
source("~/Documents/INRA/R/nirsextra/R/gridscore_mec.R")
load("~/Documents/INRA/R/xy_ag")
library(rchemo)
library(nirsextra)
library(data.table)
source("~/Documents/INRA/R/nirsextra/R/gridscore_mec.R")
ncomp=20
segm <- list(rep1 = as.list(1:nrow(x)))
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
str(fmc$ypred)
source("~/Documents/INRA/R/nirsextra/R/gridcv_mec.R")
source("~/Documents/INRA/R/nirsextra/R/gridscore_mec.R")
rm(gscorelv_mec)
source("~/Documents/INRA/R/nirsextra/R/gridscore_mec.R")
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
source("~/Documents/INRA/R/nirsextra/R/gridscore_mec.R")
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
str(fmc$ypred)
str(fmc$y)
source("~/Documents/INRA/R/nirsextra/R/gridcv_mec.R")
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
str(fmc$y)
plot(fmc$y$yp,fmc$y$yref)
source("~/Documents/INRA/R/nirsextra/R/gridscore_mec.R")
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
source("~/Documents/INRA/R/nirsextra/R/gridscore_mec.R")
source("~/Documents/INRA/R/nirsextra/R/gridscore_mec.R")
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
source("~/Documents/INRA/R/nirsextra/R/gridscore_mec.R")
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
library(dplyr)
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
str(fmc$y)
?gridscorelv
n <- 50 ; p <- 8
X <- matrix(rnorm(n * p), ncol = p, byrow = TRUE)
y <- sample(c(1, 4, 10), size = n, replace = TRUE)
Xtrain <- X ; ytrain <- y
m <- 5
Xtest <- X[1:m, ] ; ytest <- y[1:m]
nlv <- 5
pars <- mpars(nlv = 1:nlv, prior = c("unif", "prop")).
n <- 50 ; p <- 8
X <- matrix(rnorm(n * p), ncol = p, byrow = TRUE)
y <- sample(c(1, 4, 10), size = n, replace = TRUE)
Xtrain <- X ; ytrain <- y
m <- 5
Xtest <- X[1:m, ] ; ytest <- y[1:m]
nlv <- 5
pars <- mpars(nlv = 1:nlv, prior = c("unif", "prop"))
fmc = gcvlv(Xtrain, Ytrain,segm,score = err, fun = plslda, nlv = 1:ncomp, verb = F)
fmc = gcvlv(Xtrain, ytrain,segm,score = err, fun = plslda, nlv = 1:ncomp, verb = F)
pars
fmc = gcvlv(Xtrain, ytrain,pars = pars,score = err, fun = plslda, nlv = 1:ncomp, verb = F)
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
segm <- list(rep1 = as.list(1:nrow(x)))
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
load("~/Documents/INRA/R/xy_ag")
library(rchemo)
library(nirsextra)
library(data.table)
source("~/Documents/INRA/R/nirsextra/R/gridscore_mec.R")
ncomp=20
segm <- list(rep1 = as.list(1:nrow(x)))
fmc = gcvlv(x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
str(fmc)
fmc = gcvlv(x,y,x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
fmc = gridscorelv(x,y,x,y,segm,score = cor2, fun = plskern, nlv = 1:ncomp, verb = F)
gitcreds::gitcreds_set()
d="/home/ecarnot/Documents/INRA/Projets/VitaSPEC/spectres/20240405_VitaSPEC_S_DIADE/"
l=Sys.glob(file.path(d,"*.asd"))
x=matrix(, nrow = length(l), ncol = 2151)
tim=""
com=NULL
i=1
# x[i,]=get_spectra(l[i], type = "reflectance")
sp=asd_read(l[i])
library(nirsextra)
# x[i,]=get_spectra(l[i], type = "reflectance")
sp=asd_read(l[i])
x[i,]=sp$spectrum/sp$reference
times
t1=paste(sp$info$spectrumheaderwhensec,sp$info$spectrumheaderwhenmin,sp$info$spectrumheaderwhenhour,sp$info$spectrumheaderwhenmday,sp$info$spectrumheaderwhenmon,sp$info$spectrumheaderwhenyear)
tim=rbind(tim,as.POSIXct(t1, format = "%S %M %H %d %m %Y"))
tim
sp$info$spectrumheaderwhensec
?as.POSIXct
tim
tim[-1]
t=tim[-1]
as.POSIXct(t)
as.POSIXct(t, origin = "1960-01-01")
t
format(t, "%Y-%m-%d %H:%M:%S")
format(t, "%Y-%m-%d %H:%M:%S")
t1
as.POSIXct(t1, format = "%S %M %H %d %m %Y")
format(t, "%Y-%m-%d %H:%M:%S")
format(t, "%Y-%m-%d %H:%M:%S")
t <- as.POSIXct(t1, format = "%S %M %H %d %m %Y")
format(t, "%Y-%m-%d %H:%M:%S")
t= as.POSIXct(t1, format = "%S %M %H %d %m %Y")
format(t, "%Y-%m-%d %H:%M:%S")
d="/home/ecarnot/Documents/INRA/Projets/VitaSPEC/spectres/20240405_VitaSPEC_S_DIADE/"
l=Sys.glob(file.path(d,"*.asd"))
x=matrix(, nrow = length(l), ncol = 2151)
tim=""
com=NULL
i=1
# x[i,]=get_spectra(l[i], type = "reflectance")
sp=asd_read(l[i])
x[i,]=sp$spectrum/sp$reference
t1=paste(sp$info$spectrumheaderwhensec,sp$info$spectrumheaderwhenmin,sp$info$spectrumheaderwhenhour,sp$info$spectrumheaderwhenmday,sp$info$spectrumheaderwhenmon,sp$info$spectrumheaderwhenyear)
# x[i,]=get_spectra(l[i], type = "reflectance")
sp=asd_read(l[i])
library(nirsextra)
# x[i,]=get_spectra(l[i], type = "reflectance")
sp=asd_read(l[i])
t1=paste(sp$info$spectrumheaderwhensec,sp$info$spectrumheaderwhenmin,sp$info$spectrumheaderwhenhour,sp$info$spectrumheaderwhenmday,sp$info$spectrumheaderwhenmon,sp$info$spectrumheaderwhenyear)
tim=rbind(tim,as.POSIXct(t1, format = "%S %M %H %d %m %Y"))
t1
t <- as.POSIXct(t1, format = "%S %M %H %d %m %Y")
t
tim=as.POSIXct()
t
for (i in 1:length(l)) {
# x[i,]=get_spectra(l[i], type = "reflectance")
sp=asd_read(l[i])
if (type=="l") {
x[i,]=sp$spectrum
} else if(type=="ref") {
x[i,]=sp$reference
} else {
x[i,]=sp$spectrum/sp$reference
}
# x[i,]=sp$spectrum
if (times) {
t1=paste(sp$info$spectrumheaderwhensec,sp$info$spectrumheaderwhenmin,sp$info$spectrumheaderwhenhour,sp$info$spectrumheaderwhenmday,sp$info$spectrumheaderwhenmon,sp$info$spectrumheaderwhenyear)
# tim=rbind(tim,as.POSIXct(t1, format = "%S %M %H %d %m %Y"))
tim=rbind(tim,t1)
}
if (comments) {com=rbind(com,sp$info$spectrumheadercomments)}
}
type=NULL
for (i in 1:length(l)) {
# x[i,]=get_spectra(l[i], type = "reflectance")
sp=asd_read(l[i])
if (type=="l") {
x[i,]=sp$spectrum
} else if(type=="ref") {
x[i,]=sp$reference
} else {
x[i,]=sp$spectrum/sp$reference
}
# x[i,]=sp$spectrum
if (times) {
t1=paste(sp$info$spectrumheaderwhensec,sp$info$spectrumheaderwhenmin,sp$info$spectrumheaderwhenhour,sp$info$spectrumheaderwhenmday,sp$info$spectrumheaderwhenmon,sp$info$spectrumheaderwhenyear)
# tim=rbind(tim,as.POSIXct(t1, format = "%S %M %H %d %m %Y"))
tim=rbind(tim,t1)
}
if (comments) {com=rbind(com,sp$info$spectrumheadercomments)}
}
l=Sys.glob(file.path(d,"*.asd"))
x=matrix(, nrow = length(l), ncol = 2151)
tim=""
com=NULL
for (i in 1:length(l)) {
# x[i,]=get_spectra(l[i], type = "reflectance")
sp=asd_read(l[i])
if (type=="l") {
x[i,]=sp$spectrum
} else if(type=="ref") {
x[i,]=sp$reference
} else {
x[i,]=sp$spectrum/sp$reference
}
# x[i,]=sp$spectrum
if (times) {
t1=paste(sp$info$spectrumheaderwhensec,sp$info$spectrumheaderwhenmin,sp$info$spectrumheaderwhenhour,sp$info$spectrumheaderwhenmday,sp$info$spectrumheaderwhenmon,sp$info$spectrumheaderwhenyear)
# tim=rbind(tim,as.POSIXct(t1, format = "%S %M %H %d %m %Y"))
tim=rbind(tim,t1)
}
if (comments) {com=rbind(com,sp$info$spectrumheadercomments)}
}
type=F
for (i in 1:length(l)) {
# x[i,]=get_spectra(l[i], type = "reflectance")
sp=asd_read(l[i])
if (type=="l") {
x[i,]=sp$spectrum
} else if(type=="ref") {
x[i,]=sp$reference
} else {
x[i,]=sp$spectrum/sp$reference
}
# x[i,]=sp$spectrum
if (times) {
t1=paste(sp$info$spectrumheaderwhensec,sp$info$spectrumheaderwhenmin,sp$info$spectrumheaderwhenhour,sp$info$spectrumheaderwhenmday,sp$info$spectrumheaderwhenmon,sp$info$spectrumheaderwhenyear)
# tim=rbind(tim,as.POSIXct(t1, format = "%S %M %H %d %m %Y"))
tim=rbind(tim,t1)
}
if (comments) {com=rbind(com,sp$info$spectrumheadercomments)}
}
times=TRUE
for (i in 1:length(l)) {
# x[i,]=get_spectra(l[i], type = "reflectance")
sp=asd_read(l[i])
if (type=="l") {
x[i,]=sp$spectrum
} else if(type=="ref") {
x[i,]=sp$reference
} else {
x[i,]=sp$spectrum/sp$reference
}
# x[i,]=sp$spectrum
if (times) {
t1=paste(sp$info$spectrumheaderwhensec,sp$info$spectrumheaderwhenmin,sp$info$spectrumheaderwhenhour,sp$info$spectrumheaderwhenmday,sp$info$spectrumheaderwhenmon,sp$info$spectrumheaderwhenyear)
# tim=rbind(tim,as.POSIXct(t1, format = "%S %M %H %d %m %Y"))
tim=rbind(tim,t1)
}
if (comments) {com=rbind(com,sp$info$spectrumheadercomments)}
}
comments=FALSE
for (i in 1:length(l)) {
# x[i,]=get_spectra(l[i], type = "reflectance")
sp=asd_read(l[i])
if (type=="l") {
x[i,]=sp$spectrum
} else if(type=="ref") {
x[i,]=sp$reference
} else {
x[i,]=sp$spectrum/sp$reference
}
# x[i,]=sp$spectrum
if (times) {
t1=paste(sp$info$spectrumheaderwhensec,sp$info$spectrumheaderwhenmin,sp$info$spectrumheaderwhenhour,sp$info$spectrumheaderwhenmday,sp$info$spectrumheaderwhenmon,sp$info$spectrumheaderwhenyear)
# tim=rbind(tim,as.POSIXct(t1, format = "%S %M %H %d %m %Y"))
tim=rbind(tim,t1)
}
if (comments) {com=rbind(com,sp$info$spectrumheadercomments)}
}
tim
as.POSIXct(tim, format = "%S %M %H %d %m %Y")
l=Sys.glob(file.path(d,"*.asd"))
x=matrix(, nrow = length(l), ncol = 2151)
tim=""
com=NULL
for (i in 1:length(l)) {
# x[i,]=get_spectra(l[i], type = "reflectance")
sp=asd_read(l[i])
if (type=="l") {
x[i,]=sp$spectrum
} else if(type=="ref") {
x[i,]=sp$reference
} else {
x[i,]=sp$spectrum/sp$reference
}
# x[i,]=sp$spectrum
if (times) {
t1=paste(sp$info$spectrumheaderwhensec,sp$info$spectrumheaderwhenmin,sp$info$spectrumheaderwhenhour,sp$info$spectrumheaderwhenmday,sp$info$spectrumheaderwhenmon,sp$info$spectrumheaderwhenyear)
tim=rbind(tim,as.POSIXct(t1, format = "%S %M %H %d %m %Y"))
# tim=rbind(tim,t1)
}
if (comments) {com=rbind(com,sp$info$spectrumheadercomments)}
}
tim
l=Sys.glob(file.path(d,"*.asd"))
x=matrix(, nrow = length(l), ncol = 2151)
tim=""
com=NULL
for (i in 1:length(l)) {
# x[i,]=get_spectra(l[i], type = "reflectance")
sp=asd_read(l[i])
if (type=="l") {
x[i,]=sp$spectrum
} else if(type=="ref") {
x[i,]=sp$reference
} else {
x[i,]=sp$spectrum/sp$reference
}
# x[i,]=sp$spectrum
if (times) {
t1=paste(sp$info$spectrumheaderwhensec,sp$info$spectrumheaderwhenmin,sp$info$spectrumheaderwhenhour,sp$info$spectrumheaderwhenmday,sp$info$spectrumheaderwhenmon,sp$info$spectrumheaderwhenyear)
# tim=rbind(tim,as.POSIXct(t1, format = "%S %M %H %d %m %Y"))
tim=rbind(tim,t1)
}
if (comments) {com=rbind(com,sp$info$spectrumheadercomments)}
}
# if (times) {attr(x,"time")=tim[-1]}
if (times) {attr(x,"time")=as.POSIXct(tim[-1], format = "%S %M %H %d %m %Y")}
row.names(x)=gsub(".asd","",basename(l))
colnames(x)=seq(from=sp$info$spectrumheaderch1_wavel,length.out=sp$info$spectrumheaderwchannels, by=sp$info$spectrumheaderwavel_step)
str(x)
